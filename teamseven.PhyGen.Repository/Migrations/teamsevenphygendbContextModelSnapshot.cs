// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using teamseven.PhyGen.Repository.Models;

#nullable disable

namespace teamseven.PhyGen.Repository.Migrations
{
    [DbContext(typeof(teamsevenphygendbContext))]
    partial class teamsevenphygendbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SemesterId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("pk_chapters");

                    b.HasIndex(new[] { "SemesterId" }, "ix_chapters_semester_id");

                    b.ToTable("chapters", "public");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<int>("ExamTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LessonId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("pk_exams");

                    b.HasIndex(new[] { "CreatedByUserId" }, "ix_exams_created_by_user_id");

                    b.HasIndex(new[] { "ExamTypeId" }, "ix_exams_exam_type_id");

                    b.HasIndex(new[] { "IsDeleted" }, "ix_exams_is_deleted");

                    b.HasIndex(new[] { "LessonId" }, "ix_exams_lesson_id");

                    b.ToTable("exams", "public");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.ExamHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("ActionByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ActionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("ExamId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_exam_histories");

                    b.HasIndex(new[] { "ActionByUserId" }, "ix_exam_histories_action_by_user_id");

                    b.HasIndex(new[] { "ExamId" }, "ix_exam_histories_exam_id");

                    b.ToTable("exam_histories", "public");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.ExamQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("ExamId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_exam_questions");

                    b.HasIndex(new[] { "ExamId" }, "ix_exam_questions_exam_id");

                    b.HasIndex(new[] { "QuestionId" }, "ix_exam_questions_question_id");

                    b.ToTable("exam_questions", "public");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.ExamType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("pk_exam_types");

                    b.HasIndex(new[] { "Name" }, "uq_exam_types_name")
                        .IsUnique();

                    b.ToTable("exam_types", "public");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("pk_grades");

                    b.HasIndex(new[] { "Name" }, "uq_grades_name")
                        .IsUnique();

                    b.ToTable("grades", "public");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChapterId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("pk_lessons");

                    b.HasIndex(new[] { "ChapterId" }, "ix_lessons_chapter_id");

                    b.ToTable("lessons", "public");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<string>("DifficultyLevel")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("LessonId")
                        .HasColumnType("integer");

                    b.Property<string>("QuestionSource")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("pk_questions");

                    b.HasIndex(new[] { "CreatedByUserId" }, "ix_questions_created_by_user_id");

                    b.HasIndex(new[] { "LessonId" }, "ix_questions_lesson_id");

                    b.ToTable("questions", "public");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex(new[] { "RoleName" }, "uq_roles_role_name")
                        .IsUnique();

                    b.ToTable("roles", "public");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.Semester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("GradeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("pk_semesters");

                    b.HasIndex(new[] { "GradeId" }, "ix_semesters_grade_id");

                    b.ToTable("semesters", "public");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.Solution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Explanation")
                        .HasColumnType("text");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("pk_solutions");

                    b.HasIndex(new[] { "CreatedByUserId" }, "ix_solutions_created_by_user_id");

                    b.HasIndex(new[] { "IsApproved" }, "ix_solutions_is_approved");

                    b.HasIndex(new[] { "IsDeleted" }, "ix_solutions_is_deleted");

                    b.HasIndex(new[] { "QuestionId" }, "ix_solutions_question_id");

                    b.ToTable("solutions", "public");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.SolutionReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("ReportDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("ReportedByUserId")
                        .HasColumnType("integer");

                    b.Property<int>("SolutionId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Pending");

                    b.HasKey("Id")
                        .HasName("pk_solution_reports");

                    b.HasIndex(new[] { "ReportedByUserId" }, "ix_solution_reports_reported_by_user_id");

                    b.HasIndex(new[] { "SolutionId" }, "ix_solution_reports_solution_id");

                    b.ToTable("solution_reports", "public");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.SolutionsLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("GeneratedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Link")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("SolutionId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("pk_solutions_links");

                    b.HasIndex(new[] { "SolutionId" }, "ix_solutions_links_solution_id");

                    b.ToTable("solutions_links", "public");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.SubscriptionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("DurationInDays")
                        .HasColumnType("integer");

                    b.Property<string>("SubscriptionCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SubscriptionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("SubscriptionPrice")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_subscription_types");

                    b.HasIndex(new[] { "SubscriptionCode" }, "ix_subscription_types_subscription_code");

                    b.HasIndex(new[] { "UpdatedBy" }, "ix_subscription_types_updated_by");

                    b.HasIndex(new[] { "SubscriptionCode" }, "uq_subscription_types_subscription_code")
                        .IsUnique();

                    b.ToTable("subscription_types", "public");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex(new[] { "Email" }, "ix_users_email");

                    b.HasIndex(new[] { "IsActive" }, "ix_users_is_active");

                    b.HasIndex(new[] { "LastLoginAt" }, "ix_users_last_login_at");

                    b.HasIndex(new[] { "RoleId" }, "ix_users_role_id");

                    b.HasIndex(new[] { "UpdatedBy" }, "ix_users_updated_by");

                    b.HasIndex(new[] { "Email" }, "uq_users_email")
                        .IsUnique();

                    b.ToTable("users", "public");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.UserSocialProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ProfileUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_user_social_providers");

                    b.HasIndex(new[] { "UserId" }, "ix_user_social_providers_user_id");

                    b.HasIndex(new[] { "ProviderName", "ProviderId" }, "uq_user_social_providers_provider")
                        .IsUnique();

                    b.ToTable("user_social_providers", "public");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.UserSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("PaymentGatewayTransactionId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("SubscriptionTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_user_subscriptions");

                    b.HasIndex(new[] { "IsActive" }, "ix_user_subscriptions_is_active");

                    b.HasIndex(new[] { "PaymentStatus" }, "ix_user_subscriptions_payment_status");

                    b.HasIndex(new[] { "SubscriptionTypeId" }, "ix_user_subscriptions_subscription_type_id");

                    b.HasIndex(new[] { "UserId" }, "ix_user_subscriptions_user_id");

                    b.ToTable("user_subscriptions", "public");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.Chapter", b =>
                {
                    b.HasOne("teamseven.PhyGen.Repository.Models.Semester", "Semester")
                        .WithMany("Chapters")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chapters_semester_id");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.Exam", b =>
                {
                    b.HasOne("teamseven.PhyGen.Repository.Models.User", "CreatedByUser")
                        .WithMany("Exams")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("fk_exams_created_by_user_id");

                    b.HasOne("teamseven.PhyGen.Repository.Models.ExamType", "ExamType")
                        .WithMany("Exams")
                        .HasForeignKey("ExamTypeId")
                        .IsRequired()
                        .HasConstraintName("fk_exams_exam_type_id");

                    b.HasOne("teamseven.PhyGen.Repository.Models.Lesson", "Lesson")
                        .WithMany("Exams")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exams_lesson_id");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ExamType");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.ExamHistory", b =>
                {
                    b.HasOne("teamseven.PhyGen.Repository.Models.User", "ActionByUser")
                        .WithMany("ExamHistories")
                        .HasForeignKey("ActionByUserId")
                        .IsRequired()
                        .HasConstraintName("fk_exam_histories_action_by_user_id");

                    b.HasOne("teamseven.PhyGen.Repository.Models.Exam", "Exam")
                        .WithMany("ExamHistories")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exam_histories_exam_id");

                    b.Navigation("ActionByUser");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.ExamQuestion", b =>
                {
                    b.HasOne("teamseven.PhyGen.Repository.Models.Exam", "Exam")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exam_questions_exam_id");

                    b.HasOne("teamseven.PhyGen.Repository.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("fk_exam_questions_question_id");

                    b.Navigation("Exam");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.Lesson", b =>
                {
                    b.HasOne("teamseven.PhyGen.Repository.Models.Chapter", "Chapter")
                        .WithMany("Lessons")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lessons_chapter_id");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.Question", b =>
                {
                    b.HasOne("teamseven.PhyGen.Repository.Models.User", "CreatedByUser")
                        .WithMany("Questions")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("fk_questions_created_by_user_id");

                    b.HasOne("teamseven.PhyGen.Repository.Models.Lesson", "Lesson")
                        .WithMany("Questions")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_questions_lesson_id");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.Semester", b =>
                {
                    b.HasOne("teamseven.PhyGen.Repository.Models.Grade", "Grade")
                        .WithMany("Semesters")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_semesters_grade_id");

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.Solution", b =>
                {
                    b.HasOne("teamseven.PhyGen.Repository.Models.User", "CreatedByUser")
                        .WithMany("Solutions")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("fk_solutions_created_by_user_id");

                    b.HasOne("teamseven.PhyGen.Repository.Models.Question", "Question")
                        .WithMany("Solutions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_solutions_question_id");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.SolutionReport", b =>
                {
                    b.HasOne("teamseven.PhyGen.Repository.Models.User", "ReportedByUser")
                        .WithMany("SolutionReports")
                        .HasForeignKey("ReportedByUserId")
                        .IsRequired()
                        .HasConstraintName("fk_solution_reports_reported_by_user_id");

                    b.HasOne("teamseven.PhyGen.Repository.Models.Solution", "Solution")
                        .WithMany("SolutionReports")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_solution_reports_solution_id");

                    b.Navigation("ReportedByUser");

                    b.Navigation("Solution");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.SolutionsLink", b =>
                {
                    b.HasOne("teamseven.PhyGen.Repository.Models.Solution", "Solution")
                        .WithMany("SolutionsLinks")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_solutions_links_solution_id");

                    b.Navigation("Solution");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.SubscriptionType", b =>
                {
                    b.HasOne("teamseven.PhyGen.Repository.Models.User", "UpdatedByNavigation")
                        .WithMany("SubscriptionTypes")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_subscription_types_updated_by");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.User", b =>
                {
                    b.HasOne("teamseven.PhyGen.Repository.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("fk_users_role_id");

                    b.HasOne("teamseven.PhyGen.Repository.Models.User", "UpdatedByNavigation")
                        .WithMany("InverseUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_users_updated_by");

                    b.Navigation("Role");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.UserSocialProvider", b =>
                {
                    b.HasOne("teamseven.PhyGen.Repository.Models.User", "User")
                        .WithMany("UserSocialProviders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_social_providers_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.UserSubscription", b =>
                {
                    b.HasOne("teamseven.PhyGen.Repository.Models.SubscriptionType", "SubscriptionType")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("SubscriptionTypeId")
                        .IsRequired()
                        .HasConstraintName("fk_user_subscriptions_subscription_type_id");

                    b.HasOne("teamseven.PhyGen.Repository.Models.User", "User")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_subscriptions_user_id");

                    b.Navigation("SubscriptionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.Chapter", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.Exam", b =>
                {
                    b.Navigation("ExamHistories");

                    b.Navigation("ExamQuestions");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.ExamType", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.Grade", b =>
                {
                    b.Navigation("Semesters");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.Lesson", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.Question", b =>
                {
                    b.Navigation("Solutions");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.Semester", b =>
                {
                    b.Navigation("Chapters");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.Solution", b =>
                {
                    b.Navigation("SolutionReports");

                    b.Navigation("SolutionsLinks");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.SubscriptionType", b =>
                {
                    b.Navigation("UserSubscriptions");
                });

            modelBuilder.Entity("teamseven.PhyGen.Repository.Models.User", b =>
                {
                    b.Navigation("ExamHistories");

                    b.Navigation("Exams");

                    b.Navigation("InverseUpdatedByNavigation");

                    b.Navigation("Questions");

                    b.Navigation("SolutionReports");

                    b.Navigation("Solutions");

                    b.Navigation("SubscriptionTypes");

                    b.Navigation("UserSocialProviders");

                    b.Navigation("UserSubscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
